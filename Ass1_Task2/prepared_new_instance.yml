# prepared_new_instance.yml
#
# Authors: Daming Li   (Massey ID: 15398736, Email: ldm2264@gmail.com, @Damming github.com)
#          Moravy Oum  (Massey ID: 16859528 , Email: moravy22@gmail.com , @Moravy github.com)
#          Yaozu zhang   (Massey ID: 15398302, Email: 1264453650@qq.com, @shadoade github.com)
#          Simon Freeman (Massey ID: 13036748, Email: freeman.simon@rocketmail.com, @Simon3man github.com)
#
# Create time: 01/Aug./2018
#
# Homepage: https://github.com/Damming/2018_Group_14
# License: https://raw.githubusercontent.com/Damming/2018_Group_14/master/License.txt?token=AZvMHA8ak_65kW9KyjSlAd5-8o7vGDw_ks5bg8pGwA%3D%3D
#
# Description: Create an AWS key pair and an AWS EC2 Instance using that key pair. Install all required libraries and turn a blanck Ubuntu Server (the new instance) to an OpenStreetMap Server
# 
# System required: Ubuntu Server 18.04
#
# Run: ansible-playbook prepared_new_instance.yml



# beginning of the script

---
  - name: Provision an EC2 Instance
    hosts: local
    connection: local
    gather_facts: False
    tags: provisioning
    # Necessary Variables for creating/provisioning the EC2 Instance
    vars:
      instance_type: t2.micro
      security_group: ansibleGroup # Change the security group name here
      image: ami-702d7f08 # .NET Core 2.1 with Ubuntu Server 18.04 - Version 1.0
      keypair: keypairForAnsible # This is one of my keys that i already have in AWS
      region: us-west-2 # Change the Region
      volumes:
       - device_name: /dev/sda1
         volume_size: 30
      count: 1

    # Task that will be used to Launch/Create an EC2 Instance
    tasks:

      - name: Create a new EC2 key
        ec2_key:
          name: keypairForAnsible
          region: "{{ region }}"
        register: ec2_key_result

      - name: Save private key
        copy: content="{{ ec2_key_result.key.private_key }}" dest="~/.ssh/keypairForAnsible.yem" mode=0600
        when: ec2_key_result.changed

      - name: Create a security group
        local_action: 
          module: ec2_group
          name: "{{ security_group }}"
          description: Security Group for webserver Servers
          region: "{{ region }}"
          rules:
            # HTTP
            - proto: tcp
              from_port: 80
              to_port: 80
              cidr_ip: 0.0.0.0/0

            # PostgreSQL
            - proto: tcp
              from_port: 5432
              to_port: 5432
              cidr_ip: 127.0.0.1/32

            # SSH
            - proto: tcp
              from_port: 22
              to_port: 22
              cidr_ip: 0.0.0.0/0

            # HTTPS
            - proto: tcp
              from_port: 443
              to_port: 443
              cidr_ip: 0.0.0.0/0
          rules_egress:
            - proto: all
              cidr_ip: 0.0.0.0/0
        register: basic_firewall

      - name: Launch the new EC2 Instance
        local_action: ec2
                      group={{ security_group }}
                      instance_type={{ instance_type}}
                      image={{ image }}
                      wait=true
                      region={{ region }}
                      keypair={{ keypair }}
                      volumes={{ volumes }}
                      count={{count}}
        register: ec2

      - name: Add the newly created EC2 instance(s) to the local host group (located inside the directory)
        local_action: lineinfile
                      dest="./hosts"
                      regexp={{ item.public_ip }}
                      insertafter="[webserver]" line="{{ item.public_ip }} ansible_python_interpreter=/usr/bin/python3"
        with_items: "{{ ec2.instances }}"

      - name: Wait for SSH to come up
        local_action: wait_for
                      host={{ item.public_ip }}
                      port=22
                      state=started
        with_items: "{{ ec2.instances }}"

      - name: Add tag to Instance(s)
        local_action: ec2_tag resource={{ item.id }} region={{ region }} state=present
        with_items: "{{ ec2.instances }}"
        args:
          tags:
            Name: webserver

      - name: Refresh hosts file
        meta: refresh_inventory

  - name: install openstreetmap
    hosts: webserver
    remote_user: ubuntu
    gather_facts: True
    become_user: root
    become: yes
    # sudo: yes
    tags: provisioning

    vars:
      db_user: postgres
      db_name: postres
      db_password: postgres_007%

    tasks:

      - name: Update Ubuntu & Install essential tools
        become: yes
        apt: 
          name: "{{ packages }}"
          state: latest
          update_cache: yes
        vars:
          packages:
            - ca-certificates
            - curl
            - unzip
            - gdal-bin
            - tar
            - wget
            - bzip2
            - build-essential
            - clang
      
      # ---------------- Yaozu Part ----------------

      # ---------------- Moravy Part ----------------

      - name: restart postgresql
        service: name=postgresql state=restart
      
      - name: Ensure user has access to the database
        sudo_user: postgres
        postgresql_user: db={{ db_name }}
                         name={{ db_user }}
                         password={{ db_password }}
                         priv=ALL
                         state=present
      
      - name: postgis
        sudo: yes
        postgresql_db: name= {{db_name}}
                       encoding  = 'UTF-8'
                       lc_collate= 'en_GB.utf8'
                       lc_ctype  = 'en_GB.utf8'
                       template  = 'template0'
       
      # Create the postgis and hstore extensions
      - name: connect gis
        command: psql -U postgres -h $HOSTNAME -c "\connect gis"
        tags:
          name: Openstreetmap
      
      - name: hstore extension
        command: psql -U postgres -h $HOSTNAME -d gis -c "CREATE EXTENSION {{item}}"
        with_items:
          - hstore
          - fuzzystrmatch
       
      - name: postgis extension
        command: psql -U postgres -h $HOSTNAME -d gis -c "CREATE EXTENSION {{item}}"
        with_items:
          - postgis

      - name: Add a user and grant access to gis DB
        sudo_user: postgres
        postgresql_user:
                  db_name: postres
                  name: ubuntu
                  password: postres_007%
                  priv: ALL
       
      - name: Enabling remote access to PostgreSQL (1)
        lineinfile:
              path: /etc/postgresql/10/main/pg_hba.conf
              line: 'host all all 0.0.0.0/0 trust'
            
      - name: Enabling remote access to PostgreSQL (2)
        lineinfile:
              path: /etc/postgresql/10/main/postgresql.conf
              line: "listen_addresses = '*'"
      
      - name: restart postgresql
        service: name=postgresql state=restart
      
      - name: Tuning the database
        sudo: yes
        lineinfile:
              path: -a /etc/postgresql/10/main/postgresql.conf
              line: {{ item }}
        with_items:
          - 'shared_buffers = 128MB'
          - 'min_wal_size = 80MB'
          - 'max_wal_size = 1GB'
          - 'work_mem = 4MB'
          - 'maintenance_work_mem= 64MB'
          - 'autovacuum = off'
          - 'fsync = off'
      
      # Install Osm2pgsql
      - name: add repository
        sudo: yes
        apt_repository: 
              repo: ppa:osmadmins/ppa
              update-cache: yes
              
      - name: add a key
        apt_key:
          keyserver: keyserver.ubuntu.com
          id: A438A16C88C6BE41CB1616B8D57F48750AC4F2CB
      
      - name: apt-get update
        sudo: yes
        apt:
          name: "*"
          state: latest
          
      - name: install osm
        apt: 
          name: osm2pgsql
          state: latest
      
      - name: Get an OpenStreetMap data extract
        get_url: url=https://raw.githubusercontent.com/Damming/MapData/master/Auckland.osm.pbf dest=~/src/openstreetmap-carto
       
      # Load data to postgis
      - name: Load data to postgis(1)
        sysctl:
          name: vm.overcommit_memory
          value: 1
      
      - name: Load data to postgis(2)
        shell: HOSTNAME=localhost
      
      - name: Load data to postgis(3)
        shell: osm2pgsql -s -C 300 -c -G --hstore --style openstreetmap-carto.style --tag-transform-script openstreetmap-carto.lua -d gis -H $HOSTNAME -U postgres Auckland.osm.pbf
        tags:
          name: Openstreetmap
      
      # Create indexes and grant users
      - name: indexes and grantuser
        shell: HOSTNAME=localhost
       
      - name: indexes
        shell: scripts/indexes.py | psql -U postgres -h $HOSTNAME -d gis
       
      - name: grantuser(3)
        get_url: https://raw.githubusercontent.com/openstreetmap/osm2pgsql/master/install-postgis-osm-user.sh
        
      - name: grantuser(4)
        file:  dest= ./install-postgis-osm-user.sh mode = a+x
       
      - name: grantuser(5)
        shell: ./install-postgis-osm-user.sh gis ubuntu
         
      # ---------------- Simon Part ----------------  

      # Configure renderd
      - name: Configure rendered(1) socketname
        ini_file:
          path: /usr/local/etc/renderd.conf
          section: renderd
          option: socketname
          value: /var/run/renderd/renderd.sock

      - name: Configure rendered(2) plugins_dir
        ini_file:
          path: /usr/local/etc/renderd.conf
          section: mapnik
          option: plugins_dir
          value: /usr/lib/mapnik/3.0/input/

      - name: Configure rendered(3) font_dir
        ini_file:
          path: /usr/local/etc/renderd.conf
          section: mapnik
          option: font_dir
          value: /usr/share/fonts

      - name: Configure rendered(4) font_dir_recurse
        ini_file:
          path: /usr/local/etc/renderd.conf
          section: mapnik
          option: font_dir_recurse
          value: true

      - name: Configure rendered(5) URI
        ini_file:
          path: /usr/local/etc/renderd.conf
          section: default
          option: URI
          value: /osm_tiles/

      - name: Configure rendered(6) XML
        ini_file:
          path: /usr/local/etc/renderd.conf
          section: default
          option: XML
          value: /home/ubuntu/src/openstreetmap-carto/style.xml

      - name: Configure rendered(7) HOST
        ini_file:
          path: /usr/local/etc/renderd.conf
          section: default
          option: HOST
          value: localhost

      # ---------------- Overlap Part ---------------- 

      # Install renderd init script by copying the sample init script included in its package
      - name: install renderd(1)
        action: copy src=~/src/mod_tile/debian/renderd.init dest: /etc/init.d/postgresql
          
      - name: install renderd(2)
        script: chmod a+x /etc/init.d/renderd     


      # Edit the init script file - THIS STILL NEEDS CONVERTING. I considered using lineinfile but struggled a bit
      #- name: Configure init(1) DAEMON
      # lineinfile:
      #   path: /etc/init.d/renderd
      #   regexp: ''
      #   line: ''

      - name: Edit script(1)
        script: sed -i -e '/DAEMON=/ s~=.*~= /usr/local/bin/$NAME~' /etc/init.d/renderd
            
      - name: Edit script(2)
        script: sed -i -e '/DAEMON_ARGS=/ s~=.*~= "-c /usr/local/etc/renderd.conf"~' /etc/init.d/renderd
            
      - name: Edit script(3)
        script: sed -i -e '/RUNASUSER=/ s~=.*~=ubuntu~' /etc/init.d/renderd

      # Create directories for renderd and mod_tile
      - name: creates directory for renderd
        file: path=/var/run/renderd
        state: directory
        mode: 0755 #not suee if needed?

      - name: set owner for renderd
        script: chown ubuntu:ubuntu /var/run/renderd
        
      - name: creates directory for mod_tile
        file: path=/var/run/renderd
        state: directory
        mode: 0755 #not suee if needed?

      - name: set owner for renderd
        script: chown ubuntu:ubuntu /var/lib/mod_tile

      # Load and enable renderd
      - name: daemon reload 
        script: systemctl daemon-reload
        
      - name: start renderd
        script: systemctl start renderd
          
      - name: enable renderd
        script: systemctl enable renderd
     
      # ---------------- Overlap Part ---------------- 

      # Install renderd init script by copying the sample init script included in its package
      - name: install renderd
        action: copy src=~/src/mod_tile/debian/renderd.init dest: /etc/init.d/postgresql
        tags:
          name: Openstreetmap
      
      - name: install renderd
        shell: dest=/etc/init.d/renderd mode= a+x
       
        
      # Edit the init script file
      - name: edit script
        replace:
          path: /etc/init.d/renderd
          after: 'DAEMON='
          regexp: '(\s+)/usr/local/bin/$NAME(\s+.*)?$'
          backup: yes
       
      - name: edit script
        replace:
          path: /etc/init.d/renderd
          after: 'DAEMON_ARGS='
          regexp: '(\s+)"-c /usr/local/etc/renderd.conf"(\s+)'
          backup: yes
          
      - name: edit script
        replace:
          path: /etc/init.d/renderd
          after: 'RUNASUSER='
          regexp: 'ubuntu'
          backup: yes
        
      # renderd
      - name: reload 
        sysctl:
          daemon_reload: yes
      
      - name: start
        sysctl:
          state: started
      
      - name: enable
        sysctl:
          enable: yes
      
      # ---------------- Moravy Part Again ---------------- 

      # Configure Apache
      - name: create file and write into item
        sudo: yes
        file: 
          path: '/etc/apache2/mods-available/mod_tile.load'
          state: touch
          
      - name: write into file
        lineinfile:
              path: '/etc/apache2/mods-available/mod_tile.load'
              line: 'LoadModule tile_module /usr/lib/apache2/modules/mod_tile.so'
              
      - name: symlink
        file: 
          src: '/etc/apache2/mods-enabled/'
          dest: '/etc/apache2/mods-available/mod_tile.load'
          state: link
     
      
      # Edit The default virtual host file
      - name: add more lines
        lineinfile:
              dest: /etc/apache2/sites-enabled/000-default.conf
              line: "{{ item }}"
        with_items:
          - 'LoadTileConfigFile /usr/local/etc/renderd.conf'
          - 'ModTileRenderdSocketName /var/run/renderd/renderd.sock'
          - 'ModTileRequestTimeout 3'
          - 'ModTileMissingRequestTimeout 60'
        
      - name: restart apache2
        script: systemctl restart apache2
        tags:
          name: Openstreetmap
      
      - name: restart apache2
        service:
          name: apache2
          state: restart
       
      - name: OpenLayers
        get_url: url=https://raw.githubusercontent.com/Damming/MapData/master/ol.html dest=/var/www/html/
        tags:
          name: OpenLayers
        
      - name: Leaflet
        get_url: url=https://raw.githubusercontent.com/Damming/MapData/master/lf.html dest=/var/www/html/
        tags: 
          name: leaflet
      
      - name: Start renderd
        shell: renderd -f -c /usr/local/etc/renderd.conf
            